const MASK_KNIGHT: [u64; 64] = [
    0x20400,
    0x50800,
    0xa1100,
    0x142200,
    0x284400,
    0x508800,
    0xa01000,
    0x402000,
    0x2040004,
    0x5080008,
    0xa110011,
    0x14220022,
    0x28440044,
    0x50880088,
    0xa0100010,
    0x40200020,
    0x204000402,
    0x508000805,
    0xa1100110a,
    0x1422002214,
    0x2844004428,
    0x5088008850,
    0xa0100010a0,
    0x4020002040,
    0x20400040200,
    0x50800080500,
    0xa1100110a00,
    0x142200221400,
    0x284400442800,
    0x508800885000,
    0xa0100010a000,
    0x402000204000,
    0x2040004020000,
    0x5080008050000,
    0xa1100110a0000,
    0x14220022140000,
    0x28440044280000,
    0x50880088500000,
    0xa0100010a00000,
    0x40200020400000,
    0x204000402000000,
    0x508000805000000,
    0xa1100110a000000,
    0x1422002214000000,
    0x2844004428000000,
    0x5088008850000000,
    0xa0100010a0000000,
    0x4020002040000000,
    0x400040200000000,
    0x800080500000000,
    0x1100110a00000000,
    0x2200221400000000,
    0x4400442800000000,
    0x8800885000000000,
    0x100010a000000000,
    0x2000204000000000,
    0x4020000000000,
    0x8050000000000,
    0x110a0000000000,
    0x22140000000000,
    0x44280000000000,
    0x88500000000000,
    0x10a00000000000,
    0x20400000000000,
];

pub fn knight_moves(index: u8) -> u64 {
    MASK_KNIGHT[index as usize]
}

mod tests {

    #[allow(dead_code)]
    fn gen_move_knight_at(index: u8) -> u64 {
        let deltas: [(i8, i8); 8] = [
            (-1, -2),
            (-1, 2),
            (1, -2),
            (1, 2),
            (-2, -1),
            (-2, 1),
            (2, -1),
            (2, 1),
        ];
        let row: i8 = (index / 8) as i8;
        let col: i8 = (index % 8) as i8;
        let mut moves_bitboard = 0u64;
        for (dx, dy) in deltas {
            let x = col + dx;
            let y = row + dy;
            if (0..8).contains(&x) && (0..8).contains(&y) {
                moves_bitboard |= 1 << ((x + y * 8) as u8)
            }
        }
        moves_bitboard
    }

    #[test]
    #[ignore]
    fn show_knight_moves() {
        let mut moves: Vec<String> = Vec::new();
        for index in 0..64 {
            moves.push(format!("0x{:x}", gen_move_knight_at(index)));
        }
        println!("[{}]", moves.join(","));
    }
}
